---
import { getCollection } from 'astro:content';
import Layout from '../../layouts/Layout.astro';
import { DEFAULT_IMAGES, getOptimizedImageUrl } from '../../utils/images';
import TableOfContents from '../../components/TableOfContents.astro';
import Breadcrumb from '../../components/Breadcrumb.astro';
import CTAAlert from '../../components/CTAAlert.astro';
import SidebarCTA from '../../components/SidebarCTA.astro';
import FAQSection from '../../components/FAQSection.astro';
import RelatedContent from '../../components/RelatedContent.astro';

export async function getStaticPaths() {
  const posts = await getCollection('posts');
  return posts.map(post => ({
    params: { slug: post.slug },
    props: { post },
  }));
}

const { post } = Astro.props;
const { Content, headings } = await post.render();

// Build breadcrumb items
const breadcrumbItems = [
  ...(post.data.parent_topic 
    ? [{ 
        label: post.data.parent_topic.title, 
        href: `/topics/${post.data.parent_topic.slug}` 
      }]
    : []
  ),
  { label: post.data.title, href: `/posts/${post.slug}` }
];

// Get related posts from the same topic
const relatedPosts = (await getCollection('posts', (p) => {
  return !p.data.draft && 
         p.slug !== post.slug && 
         p.data.parent_topic?.slug === post.data.parent_topic?.slug;
})).slice(0, 3);

// Get related articles if specified
const relatedArticles = post.data.related_articles 
  ? (await getCollection('articles', (article) => 
      !article.data.draft && post.data.related_articles.includes(article.slug)
    )).slice(0, 3)
  : [];
---

<Layout 
  title={post.data.title} 
  description={post.data.description}
  image={post.data.image}
>
  <main class="max-w-7xl mx-auto px-4 pb-20">
    <Breadcrumb 
      items={breadcrumbItems}
      className="my-4"
    />
    
    <div class="relative h-[50vh] min-h-[400px] max-h-[600px] mb-12 rounded-2xl overflow-hidden shadow-lg">
      {/* Background Image */}
      <div 
        class="absolute inset-0 bg-cover bg-center"
        style={`background-image: url(${getOptimizedImageUrl(post.data.image?.src || DEFAULT_IMAGES.post.src, 1600)})`}
      >
        {/* Gradient Overlay */}
        <div class="absolute inset-0 bg-gradient-to-t from-black/80 via-black/40 to-black/20"></div>
      </div>

      {/* Content */}
      <div class="relative h-full flex flex-col items-center justify-center px-4 py-12 max-w-4xl mx-auto text-center">
        <div class="flex items-center justify-center gap-4 mb-8">
          <span class="badge badge-primary">{post.data.category}</span>
          {post.data.featured && <span class="badge">Featured</span>}
        </div>
        <h1 class="text-4xl lg:text-5xl font-bold mb-8 text-white">{post.data.title}</h1>
        <p class="text-xl text-white/90 max-w-2xl mx-auto">{post.data.description}</p>
      </div>
    </div>

    <div class="lg:grid lg:grid-cols-[250px_1fr] lg:gap-12">
      <aside class="hidden lg:block">
        <div class="sticky top-4">
          <div class="flex flex-col gap-12">
            <TableOfContents 
              headings={headings} 
              hasFAQ={!!post.data.faq}
            />
            <SidebarCTA ctaId="post_content" />
          </div>
        </div>
      </aside>
      <div class="prose prose-lg lg:prose-xl max-w-none">
        <Content />
        <CTAAlert
          ctaId="post_content"
          className="not-prose my-10"
        />
        {post.data.faq && <FAQSection faqs={post.data.faq} />}
      </div>
    </div>

    <RelatedContent 
      content={relatedPosts} 
      title="Related Posts" 
    />

    <RelatedContent 
      content={relatedArticles} 
      title="Related Articles" 
    />
  </main>
</Layout>

<style>
  /* Ensure headings have smooth scroll behavior */
  html {
    scroll-behavior: smooth;
    scroll-padding-top: 2rem;
  }
</style>
